#!/usr/bin/env python3
import argparse
import logging
import boto3      

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("Runner")
logger.setLevel(logging.INFO)



class EcsService:
    def __init__(self, client):
        self.ecs = client

    def get_ecs_service(self, service_name):
        """Get ECS services and return Worker service name
        
        Returns: ECS worker node servicename
        
        """
        try:
            response = self.ecs.list_services(
                cluster='SatCompCluster',
            )

            for service in response['serviceArns']:
                if service_name in service:
                    return service
        except Exception as e:
            logger.error(f"Failed to get ECS service names: {e}")
            raise e

    def update_ecs_service(self, leader_node_count, worker_node_count):
        worker_service = self.get_ecs_service("SolverWorkerService")
        leader_service = self.get_ecs_service("SolverLeaderService")
        try:
            ecs.update_service(
                    cluster="SatCompCluster",
                    service=leader_service,
                    desiredCount=leader_node_count
                )
            ecs.update_service(
                    cluster="SatCompCluster",
                    service=worker_service,
                    desiredCount=worker_node_count
                )
        except Exception as e:
            logger.error(f"Failed to update ECS service: {e}")
            raise e

class ScalingGroup:
    def __init__(self, client) -> None:
        self.asg_client = client

    def update_asg(self, desired_count: str):
        try:
            response = self.asg_client.describe_auto_scaling_groups()['AutoScalingGroups']
            for group in response:
                if 'EcsInstanceAsg' in group["AutoScalingGroupName"]:
                    asg_name = group["AutoScalingGroupName"]

            response = self.asg_client.update_auto_scaling_group(
                AutoScalingGroupName= asg_name,
                MaxSize=desired_count,
                DesiredCapacity=desired_count,
            )
        except Exception as e:
            logger.error(f"Failed to update ASG: {e}")
            raise e


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('--profile', required = True, help = "AWS profile")
    parser.add_argument('--option', required = True, choices = ["setup", "shutdown"], help = "AddInstances / DeleteInstances.")
    parser.add_argument('--workers', required = False, help = "Required Worker nodes count")
    
    args = parser.parse_args()


    profile = args.profile
    run = args.option

    if run == 'setup':
        # Setup Instances
        worker_node_count = args.workers
        leader_node_count = "1"
        desired_count = str(int(worker_node_count)+1)
    elif run == 'shutdown':
        # Shutdown instances
        leader_node_count = worker_node_count = desired_count = "0"

    session = boto3.Session(profile_name=profile)
    ecs = session.client('ecs')
    ecs_service = EcsService(ecs)

    asg_client = session.client('autoscaling')
    asg = ScalingGroup(asg_client)
    
    asg.update_asg(int(desired_count))
    try:
        ecs_service.update_ecs_service(int(leader_node_count), int(worker_node_count))
    except Exception as e:
        logger.info(f"Failed to update ECS service. {e}")
        logger.info("Updating ASG")
        asg.update_asg("0")
