#!/usr/bin/env python3
import argparse
import logging
import subprocess
import sys
from typing import List

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger("Quickstart Build")
logger.setLevel(logging.INFO)


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("--profile", required=False, help="AWS profile")
    parser.add_argument(
        "--project",
        required=False,
        default="comp23",
        help="ADVANCED USERS ONLY: Name of the project (default: 'comp23').",
    )
    return parser.parse_args()


def create_aws_infrastructure(profile_args: List[str], project_args: List[str]) -> None:
    cmd = (
        [
            "python3",
            "manage-solver-infrastructure.py",
            "--solver-type",
            "parallel",
            "--mode",
            "create",
        ]
        + profile_args
        + project_args
    )
    logger.info(
        f"Creating the AWS infrastructure for project {project_args[1]} using create-solver-project."
    )
    logger.info("This operation will likely take 5-7 minutes.")
    try:
        result = subprocess.run(cmd)
        pass
    except Exception as e:
        logger.error(
            f"Unexpected error {e}: Unable to run {cmd}.  Is python3 installed and in your path?"
        )
        sys.exit(-1)
    if result.returncode:
        logger.error(f"create-solver-infrastructure failed with error code {result}")
        logger.error(
            "Unable to create solver infrastructure...has it already been created?"
        )
        logger.error(
            "If not, have you set up the default profile in your ~/.aws/config file?"
        )
        logger.error("If so, does your project name meet the expected format?")
        sys.exit(-1)


def build_sat_comp_images() -> None:

    logger.info("Building the Docker images for the competition base containers")
    cmd = [
        "cd ../docker/satcomp-images && ./build_satcomp_images.sh && cd ../../infrastructure"
    ]
    try:
        result = subprocess.run(cmd, shell=True)
    except Exception as e:
        logger.error(
            f"Unexpected error {e}: unable to run command to build base image: {cmd}."
        )
        sys.exit(-1)
    if result.returncode:
        logger.error(
            "Unexpected error: Unable to build docker images for base containers."
        )
        sys.exit(-1)


def build_iprover_image() -> None:

    logger.info(
        "Building the Docker images for iProver.  This will require ~10 minutes."
    )
    cmd = ["cd ~/casc-j10 && docker build -t smtcomp-iprover:leader ."]
    try:
        result = subprocess.run(cmd, shell=True)
    except Exception as e:
        logger.error(
            f"Unexpected error {e}: unable to run command to build iProver image: {cmd}."
        )
        sys.exit(-1)
    if result.returncode:
        logger.error(
            "Unexpected error: Unable to build docker images for base containers."
        )
        sys.exit(-1)


def upload_solver_image(profile_args: List[str], project_args: List[str]) -> None:

    cmd = (
        [
            "python3",
            "docker-upload-to-ecr.py",
            "--leader",
            "smtcomp-iprover:leader",
        ]
        + profile_args
        + project_args
    )
    logger.info("Uploading the Mallob Docker files to ECR.")
    logger.info(
        "This operation will likely take 2-5 minutes, depending on network bandwidth."
    )
    try:
        result = subprocess.run(cmd)
    except Exception as e:
        logger.error(
            f"Unexpected error {e}: Unable to upload Mallob docker images to ECR."
        )
        exit(-1)
    if result.returncode:
        logger.error(
            f"Unexpected error (return code {result}).  Unable to upload Mallob docker images to ECR"
        )
        sys.exit(-1)

    logger.info("Upload complete; quickstart-build successful!")
    sys.exit(0)


def main():
    args = get_args()
    profile_args = ["--profile", args.profile] if args.profile else []
    project_args = ["--project", args.project]

    # run the create script
    create_aws_infrastructure(profile_args, project_args)

    # Build base infrastructure images
    build_sat_comp_images()

    # Build iProver image
    build_iprover_image()

    # Upload solver image
    upload_solver_image(profile_args, project_args)


if __name__ == "__main__":
    main()
